apply {
    plugin "com.android.library"
    plugin "kotlin-android"
    plugin "kotlin-android-extensions"
    plugin "kotlin-kapt"
    plugin "dagger.hilt.android.plugin"
}
android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName

        consumerProguardFiles 'proguard-rules.pro'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    useLibrary 'org.apache.http.legacy'

}

dependencies {
    if (project.name.endsWith("_pkg") || project.name.endsWith("_mock")) {
        // if module's name equals 'pkg', api all of export
        for (def entrySet : ConfigUtils.getApplyExports().entrySet()) {
            api entrySet.value.dep
        }
    } else if (project.name.endsWith("_export")) {
        api Config.depConfig.lib_common.dep
    }
    api(Config.depConfig.hilt.dep)
    api(Config.depConfig.hiltViewModule.dep)
    kapt(Config.depConfig.hiltCompiler.dep)
    kapt(Config.depConfig.hiltViewModuleCompiler.dep)
    kapt(Config.depConfig.glide_compiler.dep) {
        exclude module: 'jsr305'
    }
    kapt(Config.depConfig.roomCompiler.dep)
}